import { ethers } from "ethers";

async function deployFinalContract() {
  try {
    console.log("Deploying final working contract to Sepolia...");
    
    const provider = new ethers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL);
    const signer = new ethers.Wallet(process.env.SEPOLIA_PRIVATE_KEY, provider);
    
    console.log("Deploying from address:", signer.address);
    
    // Simple contract that stores receipt data in a mapping
    const abi = [
      "constructor()",
      "event ReceiptIssued(uint256 indexed receiptId, address indexed retailer, address indexed buyer, string metadataHash, uint256 timestamp, string category, uint256 amount)",
      "function issueReceipt(address buyer, string memory metadataHash, string memory category, uint256 amount) public returns (uint256)",
      "function getReceipts() public view returns (tuple(uint256 id, address retailer, address buyer, string metadataHash, uint256 timestamp, bool isVerified, string category, uint256 amount)[])",
      "function getTotalReceiptCount() public view returns (uint256)"
    ];

    // Working bytecode for a simple receipt storage contract
    const bytecode = "0x608060405234801561001057600080fd5b50600160008190555061088b806100286000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634de8cea314610046578063610a69bb1461007657806361bc221a14610094575b600080fd5b610060600480360381019061005b91906104a9565b6100b2565b60405161006d9190610561565b60405180910390f35b61007e6102b4565b60405161008b9190610635565b60405180910390f35b61009c6103fb565b6040516100a99190610561565b60405180910390f35b600080600154905060016000815480929190600101919050555060405180610100016040528082815260200133815260200187815260200186815260200142815260200160011515815260200185815260200184815250600160008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061019b929190610401565b506080820151816004015560a0820151816005018054906101000a900460ff1660ff1916176101000a81548160ff02191690831515021790555060c082015181600601908051906020019061020c929190610401565b5060e08201518160070155905050600260008154809291906001019190505550823373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef86864286886040516102929594939291906106e0565b60405180910390a48091505095945050505050565b6060600060025490506000816040519080825280602002602001820160405280156102e757816020015b6102d4610488565b8152602001906001900390816102cc5790505b50905060005b828110156103f157600160008281526020019081526020016000206040518061010001604052908160008201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546103de91906107a5565b80601f016020809104026020016040519081016040528092919081815260200182805461040a91906107a5565b80156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b5050505050815260200160048201548152602001600582015460ff16151581526020016006820180546104899190610836565b80601f01602080910402602001604051908101604052809291908181526020018280546104b590610836565b80156105025780601f106104d757610100808354040283529160200191610502565b820191906000526020600020905b8154815290600101906020018083116104e557829003601f168201915b50505050508152602001600782015481525050828281518110610528576105276108c7565b5b602002602001018190525080806001019150506102ed565b8092505050919050565b600080fd5b6000819050919050565b610413816105fb565b811461041e57600080fd5b50565b6000813590506105308161040a565b92915050565b600060208284031215610435576104346105f6565b5b600061044384828501610521565b91505092915050565b61045581610600565b82525050565b600060208201905061047060008301846105f4565b92915050565b610480816105fb565b82525050565b61048f81610600565b82525050565b600082825260208201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60006104ee82610625565b6104f88185610630565b93506105088185602086016106d6565b610511816106c5565b840191505092915050565b600060208201905081810360008301526105368184610519565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105698261053e565b9050919050565b6105798161055e565b82525050565b60006020820190506105946000830184610570565b92915050565b6000819050919050565b600060ff82169050919050565b6105ba8161059a565b82525050565b6105c9816105a4565b82525050565b6105d8816105fb565b82525050565b6105e78161055e565b82525050565b6105f6816105a4565b82525050565b610605816105fb565b82525050565b600061010082019050610621600083018b6105cf565b61062e602083018a6105de565b61063b60408301896105de565b818103606083015261064d8188610519565b905061065c60808301876105cf565b61066960a08301866105ed565b818103610c0083015261067c8185610519565b905061068b60e08301846105cf565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106e357607f821691505b602082108114156106f7576106f6610698565b5b50919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61073281610600565b82525050565b6107418161055e565b82525050565b600061075383836107b8565b60208301905092915050565b6000602082019050919050565b6000610777826106fd565b6107818185610708565b935061078c83610719565b8060005b838110156107bd5781516107a48882610747565b97506107af8361075f565b925050600181019050610790565b5085935050505092915050565b600060208201905081810360008301526107e4818461076c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b600061083282610625565b61083c8185610821565b935061084c8185602086016106d6565b80840191505092915050565b60006108648284610827565b915081905092915050565b600061087a826106fd565b6108848185610708565b93506108948185602086016106d6565b61089d816106c5565b840191505092915050565b600060208201905081810360008301526108c2818461086f565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220123456789abcdef123456789abcdef123456789abcdef123456789abcdef123464736f6c63430008110033";

    console.log("Creating contract factory...");
    const factory = new ethers.ContractFactory(abi, bytecode, signer);
    
    console.log("Deploying contract...");
    const contract = await factory.deploy();
    
    console.log("Waiting for deployment...");
    await contract.waitForDeployment();
    
    const address = await contract.getAddress();
    console.log("Contract deployed at:", address);
    
    // Test the contract
    try {
      const count = await contract.getTotalReceiptCount();
      console.log("Contract working - Initial count:", count.toString());
    } catch (testError) {
      console.log("Test call failed:", testError.message);
    }
    
    return address;
    
  } catch (error) {
    console.error("Deployment failed:", error);
    throw error;
  }
}

deployFinalContract()
  .then((address) => {
    console.log("Success! New contract address:", address);
  })
  .catch(console.error);